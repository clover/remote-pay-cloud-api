/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var remotepay_BaseRequest = require("../remotepay/BaseRequest");
var remotepay_TransactionType = require("../remotepay/TransactionType");
var payments_VaultedCard = require("../payments/VaultedCard");

/**
* @constructor
* @augments remotepay.BaseRequest
* @memberof remotepay
*/
var TransactionRequest = function() {
  remotepay_BaseRequest.call(this);
  this._superClass_ = remotepay_BaseRequest;
  this._class_ = TransactionRequest;
  this.disablePrinting = undefined;
  this.cardNotPresent = undefined;
  this.disableRestartTransactionOnFail = undefined;
  this.amount = undefined;
  this.cardEntryMethods = undefined;
  this.vaultedCard = undefined;
  this.externalId = undefined;
  this.type = undefined;
};

TransactionRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
TransactionRequest.prototype.constructor = TransactionRequest;

/**
* Set the field value
* Do not print
*
* @memberof remotepay.TransactionRequest
* @param {Boolean|Null} disablePrinting 
*/
TransactionRequest.prototype.setDisablePrinting = function(disablePrinting) {
  this.disablePrinting = disablePrinting;
};

/**
* Get the field value
* Do not print
* @memberof remotepay.TransactionRequest
* @return {Boolean|Null} 
*/
TransactionRequest.prototype.getDisablePrinting = function() {
  return this.disablePrinting;
};

/**
* Set the field value
* If true then card not present is accepted
*
* @memberof remotepay.TransactionRequest
* @param {Boolean|Null} cardNotPresent 
*/
TransactionRequest.prototype.setCardNotPresent = function(cardNotPresent) {
  this.cardNotPresent = cardNotPresent;
};

/**
* Get the field value
* If true then card not present is accepted
* @memberof remotepay.TransactionRequest
* @return {Boolean|Null} 
*/
TransactionRequest.prototype.getCardNotPresent = function() {
  return this.cardNotPresent;
};

/**
* Set the field value
* If the transaction times out or fails because of decline, do not restart it
*
* @memberof remotepay.TransactionRequest
* @param {Boolean|Null} disableRestartTransactionOnFail 
*/
TransactionRequest.prototype.setDisableRestartTransactionOnFail = function(disableRestartTransactionOnFail) {
  this.disableRestartTransactionOnFail = disableRestartTransactionOnFail;
};

/**
* Get the field value
* If the transaction times out or fails because of decline, do not restart it
* @memberof remotepay.TransactionRequest
* @return {Boolean|Null} 
*/
TransactionRequest.prototype.getDisableRestartTransactionOnFail = function() {
  return this.disableRestartTransactionOnFail;
};

/**
* Set the field value
* Total amount paid
*
* @memberof remotepay.TransactionRequest
* @param {Number|Null} amount must be a long integer, 
*/
TransactionRequest.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Total amount paid
* @memberof remotepay.TransactionRequest
* @return {Number|Null} must be a long integer, 
*/
TransactionRequest.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Allowed entry methods
*
* @memberof remotepay.TransactionRequest
* @param {Number|Null} cardEntryMethods must be an integer, 
*/
TransactionRequest.prototype.setCardEntryMethods = function(cardEntryMethods) {
  this.cardEntryMethods = cardEntryMethods;
};

/**
* Get the field value
* Allowed entry methods
* @memberof remotepay.TransactionRequest
* @return {Number|Null} must be an integer, 
*/
TransactionRequest.prototype.getCardEntryMethods = function() {
  return this.cardEntryMethods;
};

/**
* Set the field value
* A saved card
*
* @memberof remotepay.TransactionRequest
* @param {payments.VaultedCard|Null} vaultedCard 
*/
TransactionRequest.prototype.setVaultedCard = function(vaultedCard) {
  this.vaultedCard = vaultedCard;
};

/**
* Get the field value
* A saved card
* @memberof remotepay.TransactionRequest
* @return {payments.VaultedCard|Null} 
*/
TransactionRequest.prototype.getVaultedCard = function() {
  return this.vaultedCard;
};

/**
* Set the field value
* An id that will be persisted with transactions.
*
* @memberof remotepay.TransactionRequest
* @param {String} externalId 
*/
TransactionRequest.prototype.setExternalId = function(externalId) {
  this.externalId = externalId;
};

/**
* Get the field value
* An id that will be persisted with transactions.
* @memberof remotepay.TransactionRequest
* @return {String} 
*/
TransactionRequest.prototype.getExternalId = function() {
  return this.externalId;
};

/**
* Set the field value
* The type of the transaction.
*
* @memberof remotepay.TransactionRequest
* @param {remotepay.TransactionType} type 
*/
TransactionRequest.prototype.setType = function(type) {
  this.type = type;
};

/**
* Get the field value
* The type of the transaction.
* @memberof remotepay.TransactionRequest
* @return {remotepay.TransactionType} 
*/
TransactionRequest.prototype.getType = function() {
  return this.type;
};

TransactionRequest._meta_ =  {fields:  {}};
TransactionRequest._meta_.fields["disablePrinting"] = {};
TransactionRequest._meta_.fields["disablePrinting"].type = Boolean;
TransactionRequest._meta_.fields["cardNotPresent"] = {};
TransactionRequest._meta_.fields["cardNotPresent"].type = Boolean;
TransactionRequest._meta_.fields["disableRestartTransactionOnFail"] = {};
TransactionRequest._meta_.fields["disableRestartTransactionOnFail"].type = Boolean;
TransactionRequest._meta_.fields["amount"] = {};
TransactionRequest._meta_.fields["amount"].type = Number;
TransactionRequest._meta_.fields["cardEntryMethods"] = {};
TransactionRequest._meta_.fields["cardEntryMethods"].type = Number;
TransactionRequest._meta_.fields["vaultedCard"] = {};
TransactionRequest._meta_.fields["vaultedCard"].type = payments_VaultedCard;
TransactionRequest._meta_.fields["externalId"] = {};
TransactionRequest._meta_.fields["externalId"].type = String;
TransactionRequest._meta_.fields["type"] = {};
TransactionRequest._meta_.fields["type"].type = remotepay_TransactionType;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = TransactionRequest;
}

