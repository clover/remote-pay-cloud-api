/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var order_Discount = require("../order/Discount");
var onlineorder_OnlineOrder = require("../onlineorder/OnlineOrder");
var order_LineItem = require("../order/LineItem");
var order_OrderType = require("../order/OrderType");
var base_Reference = require("../base/Reference");
var base_ServiceCharge = require("../base/ServiceCharge");

/**
* @constructor
* @memberof onlineorder
*/
var OnlineOrderCart = function() {
  this._class_ = OnlineOrderCart;
  this.id = undefined;
  this.currency = undefined;
  this.title = undefined;
  this.note = undefined;
  this.clientCreatedTime = undefined;
  this.serviceCharge = undefined;
  this.discounts = undefined;
  this.lineItems = undefined;
  this.orderType = undefined;
  this.merchant = undefined;
  this.onlineOrder = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof onlineorder.OnlineOrderCart
* @param {String} id 
*/
OnlineOrderCart.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof onlineorder.OnlineOrderCart
* @return {String} 
*/
OnlineOrderCart.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* Currency of this order. For example, "USD"
*
* @memberof onlineorder.OnlineOrderCart
* @param {String} currency 
*/
OnlineOrderCart.prototype.setCurrency = function(currency) {
  this.currency = currency;
};

/**
* Get the field value
* Currency of this order. For example, "USD"
* @memberof onlineorder.OnlineOrderCart
* @return {String} 
*/
OnlineOrderCart.prototype.getCurrency = function() {
  return this.currency;
};

/**
* Set the field value
* @memberof onlineorder.OnlineOrderCart
* @param {Null|String} title 
*/
OnlineOrderCart.prototype.setTitle = function(title) {
  this.title = title;
};

/**
* Get the field value
* @memberof onlineorder.OnlineOrderCart
* @return {Null|String} 
*/
OnlineOrderCart.prototype.getTitle = function() {
  return this.title;
};

/**
* Set the field value
* An arbitrary string with information about this order, may be printed on the order receipt and displayed in apps
*
* @memberof onlineorder.OnlineOrderCart
* @param {Null|String} note 
*/
OnlineOrderCart.prototype.setNote = function(note) {
  this.note = note;
};

/**
* Get the field value
* An arbitrary string with information about this order, may be printed on the order receipt and displayed in apps
* @memberof onlineorder.OnlineOrderCart
* @return {Null|String} 
*/
OnlineOrderCart.prototype.getNote = function() {
  return this.note;
};

/**
* Set the field value
* The time at which the client created this order
*
* @memberof onlineorder.OnlineOrderCart
* @param {Number} clientCreatedTime must be a long integer
*/
OnlineOrderCart.prototype.setClientCreatedTime = function(clientCreatedTime) {
  this.clientCreatedTime = clientCreatedTime;
};

/**
* Get the field value
* The time at which the client created this order
* @memberof onlineorder.OnlineOrderCart
* @return {Number} must be a long integer
*/
OnlineOrderCart.prototype.getClientCreatedTime = function() {
  return this.clientCreatedTime;
};

/**
* Set the field value
* Optional service charge (gratuity) applied to this order
*
* @memberof onlineorder.OnlineOrderCart
* @param {Null|base.ServiceCharge} serviceCharge 
*/
OnlineOrderCart.prototype.setServiceCharge = function(serviceCharge) {
  this.serviceCharge = serviceCharge;
};

/**
* Get the field value
* Optional service charge (gratuity) applied to this order
* @memberof onlineorder.OnlineOrderCart
* @return {Null|base.ServiceCharge} 
*/
OnlineOrderCart.prototype.getServiceCharge = function() {
  return this.serviceCharge;
};

/**
* Set the field value
* Amount or percentage discounts applied to the order subtotal. To retrieve discounts applied to individual items, use the Get all line items for an order endpoint with the discounts field expanded (v3/merchants/{mId}/orders/{orderId}/line_items?expand=discounts).
*
* @memberof onlineorder.OnlineOrderCart
* @param {Array.<order.Discount>} discounts An array of 
*/
OnlineOrderCart.prototype.setDiscounts = function(discounts) {
  this.discounts = discounts;
};

/**
* Get the field value
* Amount or percentage discounts applied to the order subtotal. To retrieve discounts applied to individual items, use the Get all line items for an order endpoint with the discounts field expanded (v3/merchants/{mId}/orders/{orderId}/line_items?expand=discounts).
* @memberof onlineorder.OnlineOrderCart
* @return {Array.<order.Discount>} An array of 
*/
OnlineOrderCart.prototype.getDiscounts = function() {
  return this.discounts;
};

/**
* Set the field value
* Line items associated with this order
*
* @memberof onlineorder.OnlineOrderCart
* @param {Array.<order.LineItem>} lineItems An array of 
*/
OnlineOrderCart.prototype.setLineItems = function(lineItems) {
  this.lineItems = lineItems;
};

/**
* Get the field value
* Line items associated with this order
* @memberof onlineorder.OnlineOrderCart
* @return {Array.<order.LineItem>} An array of 
*/
OnlineOrderCart.prototype.getLineItems = function() {
  return this.lineItems;
};

/**
* Set the field value
* @memberof onlineorder.OnlineOrderCart
* @param {Null|order.OrderType} orderType 
*/
OnlineOrderCart.prototype.setOrderType = function(orderType) {
  this.orderType = orderType;
};

/**
* Get the field value
* @memberof onlineorder.OnlineOrderCart
* @return {Null|order.OrderType} 
*/
OnlineOrderCart.prototype.getOrderType = function() {
  return this.orderType;
};

/**
* Set the field value
* @memberof onlineorder.OnlineOrderCart
* @param {base.Reference} merchant 
*/
OnlineOrderCart.prototype.setMerchant = function(merchant) {
  this.merchant = merchant;
};

/**
* Get the field value
* @memberof onlineorder.OnlineOrderCart
* @return {base.Reference} 
*/
OnlineOrderCart.prototype.getMerchant = function() {
  return this.merchant;
};

/**
* Set the field value
* @memberof onlineorder.OnlineOrderCart
* @param {Null|onlineorder.OnlineOrder} onlineOrder 
*/
OnlineOrderCart.prototype.setOnlineOrder = function(onlineOrder) {
  this.onlineOrder = onlineOrder;
};

/**
* Get the field value
* @memberof onlineorder.OnlineOrderCart
* @return {Null|onlineorder.OnlineOrder} 
*/
OnlineOrderCart.prototype.getOnlineOrder = function() {
  return this.onlineOrder;
};

/**
* @memberof onlineorder.OnlineOrderCart
* @private
*/
OnlineOrderCart.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

OnlineOrderCart.prototype.toString = function() {
  return JSON.stringify(this);
};

OnlineOrderCart._meta_ =  {fields:  {}};
OnlineOrderCart._meta_._class_ =  OnlineOrderCart;
OnlineOrderCart._meta_.fields["id"] = {};
OnlineOrderCart._meta_.fields["id"].type = String;
OnlineOrderCart._meta_.fields["currency"] = {};
OnlineOrderCart._meta_.fields["currency"].type = String;
OnlineOrderCart._meta_.fields["title"] = {};
OnlineOrderCart._meta_.fields["title"].type = String;
OnlineOrderCart._meta_.fields["note"] = {};
OnlineOrderCart._meta_.fields["note"].type = String;
OnlineOrderCart._meta_.fields["clientCreatedTime"] = {};
OnlineOrderCart._meta_.fields["clientCreatedTime"].type = Number;
OnlineOrderCart._meta_.fields["serviceCharge"] = {};
OnlineOrderCart._meta_.fields["serviceCharge"].type = base_ServiceCharge;
OnlineOrderCart._meta_.fields["discounts"] = {};
OnlineOrderCart._meta_.fields["discounts"].type = Array;
OnlineOrderCart._meta_.fields["discounts"].elementType = order_Discount;
OnlineOrderCart._meta_.fields["lineItems"] = {};
OnlineOrderCart._meta_.fields["lineItems"].type = Array;
OnlineOrderCart._meta_.fields["lineItems"].elementType = order_LineItem;
OnlineOrderCart._meta_.fields["orderType"] = {};
OnlineOrderCart._meta_.fields["orderType"].type = order_OrderType;
OnlineOrderCart._meta_.fields["merchant"] = {};
OnlineOrderCart._meta_.fields["merchant"].type = base_Reference;
OnlineOrderCart._meta_.fields["onlineOrder"] = {};
OnlineOrderCart._meta_.fields["onlineOrder"].type = onlineorder_OnlineOrder;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = OnlineOrderCart;
}

