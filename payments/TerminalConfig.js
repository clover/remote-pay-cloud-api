/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_TerminalParam = require("../payments/TerminalParam");
var payments_TerminalManagementEvent = require("../payments/TerminalManagementEvent");

/**
* @constructor
* @memberof payments
*/
var TerminalConfig = function() {
  this._class_ = TerminalConfig;
  this.id = undefined;
  this.contactAndTerminalConfig = undefined;
  this.contactAndTerminalConfigSignature = undefined;
  this.contactlessConfig = undefined;
  this.contactlessConfigSignature = undefined;
  this.capkConfig = undefined;
  this.capkConfigSignature = undefined;
  this.revokedCapkConfig = undefined;
  this.revokedCapkConfigSignature = undefined;
  this.tagDatabase = undefined;
  this.protocolConfig = undefined;
  this.protocolConfigSignature = undefined;
  this.terminalParameters = undefined;
  this.events = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof payments.TerminalConfig
* @param {String} id 
*/
TerminalConfig.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof payments.TerminalConfig
* @return {String} 
*/
TerminalConfig.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* hex encoded emv contact configuration data
*
* @memberof payments.TerminalConfig
* @param {String} contactAndTerminalConfig 
*/
TerminalConfig.prototype.setContactAndTerminalConfig = function(contactAndTerminalConfig) {
  this.contactAndTerminalConfig = contactAndTerminalConfig;
};

/**
* Get the field value
* hex encoded emv contact configuration data
* @memberof payments.TerminalConfig
* @return {String} 
*/
TerminalConfig.prototype.getContactAndTerminalConfig = function() {
  return this.contactAndTerminalConfig;
};

/**
* Set the field value
* hex encoded signature of emv contact configuration data
*
* @memberof payments.TerminalConfig
* @param {String} contactAndTerminalConfigSignature 
*/
TerminalConfig.prototype.setContactAndTerminalConfigSignature = function(contactAndTerminalConfigSignature) {
  this.contactAndTerminalConfigSignature = contactAndTerminalConfigSignature;
};

/**
* Get the field value
* hex encoded signature of emv contact configuration data
* @memberof payments.TerminalConfig
* @return {String} 
*/
TerminalConfig.prototype.getContactAndTerminalConfigSignature = function() {
  return this.contactAndTerminalConfigSignature;
};

/**
* Set the field value
* hex encoded contactless configuration data
*
* @memberof payments.TerminalConfig
* @param {String} contactlessConfig 
*/
TerminalConfig.prototype.setContactlessConfig = function(contactlessConfig) {
  this.contactlessConfig = contactlessConfig;
};

/**
* Get the field value
* hex encoded contactless configuration data
* @memberof payments.TerminalConfig
* @return {String} 
*/
TerminalConfig.prototype.getContactlessConfig = function() {
  return this.contactlessConfig;
};

/**
* Set the field value
* hex encoded signature of contactless configuration data
*
* @memberof payments.TerminalConfig
* @param {String} contactlessConfigSignature 
*/
TerminalConfig.prototype.setContactlessConfigSignature = function(contactlessConfigSignature) {
  this.contactlessConfigSignature = contactlessConfigSignature;
};

/**
* Get the field value
* hex encoded signature of contactless configuration data
* @memberof payments.TerminalConfig
* @return {String} 
*/
TerminalConfig.prototype.getContactlessConfigSignature = function() {
  return this.contactlessConfigSignature;
};

/**
* Set the field value
* hex encoded capk configuration data
*
* @memberof payments.TerminalConfig
* @param {String} capkConfig 
*/
TerminalConfig.prototype.setCapkConfig = function(capkConfig) {
  this.capkConfig = capkConfig;
};

/**
* Get the field value
* hex encoded capk configuration data
* @memberof payments.TerminalConfig
* @return {String} 
*/
TerminalConfig.prototype.getCapkConfig = function() {
  return this.capkConfig;
};

/**
* Set the field value
* hex encoded signature of capk configuration data
*
* @memberof payments.TerminalConfig
* @param {String} capkConfigSignature 
*/
TerminalConfig.prototype.setCapkConfigSignature = function(capkConfigSignature) {
  this.capkConfigSignature = capkConfigSignature;
};

/**
* Get the field value
* hex encoded signature of capk configuration data
* @memberof payments.TerminalConfig
* @return {String} 
*/
TerminalConfig.prototype.getCapkConfigSignature = function() {
  return this.capkConfigSignature;
};

/**
* Set the field value
* hex encoded revoked capk configuration data
*
* @memberof payments.TerminalConfig
* @param {String} revokedCapkConfig 
*/
TerminalConfig.prototype.setRevokedCapkConfig = function(revokedCapkConfig) {
  this.revokedCapkConfig = revokedCapkConfig;
};

/**
* Get the field value
* hex encoded revoked capk configuration data
* @memberof payments.TerminalConfig
* @return {String} 
*/
TerminalConfig.prototype.getRevokedCapkConfig = function() {
  return this.revokedCapkConfig;
};

/**
* Set the field value
* hex encoded signature of revoked capk configuration data
*
* @memberof payments.TerminalConfig
* @param {String} revokedCapkConfigSignature 
*/
TerminalConfig.prototype.setRevokedCapkConfigSignature = function(revokedCapkConfigSignature) {
  this.revokedCapkConfigSignature = revokedCapkConfigSignature;
};

/**
* Get the field value
* hex encoded signature of revoked capk configuration data
* @memberof payments.TerminalConfig
* @return {String} 
*/
TerminalConfig.prototype.getRevokedCapkConfigSignature = function() {
  return this.revokedCapkConfigSignature;
};

/**
* Set the field value
* hex encoded tag database for android side usage
*
* @memberof payments.TerminalConfig
* @param {String} tagDatabase 
*/
TerminalConfig.prototype.setTagDatabase = function(tagDatabase) {
  this.tagDatabase = tagDatabase;
};

/**
* Get the field value
* hex encoded tag database for android side usage
* @memberof payments.TerminalConfig
* @return {String} 
*/
TerminalConfig.prototype.getTagDatabase = function() {
  return this.tagDatabase;
};

/**
* Set the field value
* hex encoded protocol specific tag data
*
* @memberof payments.TerminalConfig
* @param {String} protocolConfig 
*/
TerminalConfig.prototype.setProtocolConfig = function(protocolConfig) {
  this.protocolConfig = protocolConfig;
};

/**
* Get the field value
* hex encoded protocol specific tag data
* @memberof payments.TerminalConfig
* @return {String} 
*/
TerminalConfig.prototype.getProtocolConfig = function() {
  return this.protocolConfig;
};

/**
* Set the field value
* hex encoded signature of protocol specific tag data
*
* @memberof payments.TerminalConfig
* @param {String} protocolConfigSignature 
*/
TerminalConfig.prototype.setProtocolConfigSignature = function(protocolConfigSignature) {
  this.protocolConfigSignature = protocolConfigSignature;
};

/**
* Get the field value
* hex encoded signature of protocol specific tag data
* @memberof payments.TerminalConfig
* @return {String} 
*/
TerminalConfig.prototype.getProtocolConfigSignature = function() {
  return this.protocolConfigSignature;
};

/**
* Set the field value
* List of terminal parameters for the device
*
* @memberof payments.TerminalConfig
* @param {Array.<payments.TerminalParam>} terminalParameters An array of 
*/
TerminalConfig.prototype.setTerminalParameters = function(terminalParameters) {
  this.terminalParameters = terminalParameters;
};

/**
* Get the field value
* List of terminal parameters for the device
* @memberof payments.TerminalConfig
* @return {Array.<payments.TerminalParam>} An array of 
*/
TerminalConfig.prototype.getTerminalParameters = function() {
  return this.terminalParameters;
};

/**
* Set the field value
* @memberof payments.TerminalConfig
* @param {Array.<payments.TerminalManagementEvent>} events An array of 
*/
TerminalConfig.prototype.setEvents = function(events) {
  this.events = events;
};

/**
* Get the field value
* @memberof payments.TerminalConfig
* @return {Array.<payments.TerminalManagementEvent>} An array of 
*/
TerminalConfig.prototype.getEvents = function() {
  return this.events;
};

/**
* @memberof payments.TerminalConfig
* @private
*/
TerminalConfig.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    if(curclass._meta_._superMeta_) {
      curclass = curclass._meta_._superMeta_._class_;
    } else {
      curclass = null;
    }
  } while(curclass);
  return null;
};

TerminalConfig.prototype.toString = function() {
  return JSON.stringify(this);
};

TerminalConfig._meta_ =  {fields:  {}};
TerminalConfig._meta_._class_ =  TerminalConfig;
TerminalConfig._meta_.fields["id"] = {};
TerminalConfig._meta_.fields["id"].type = String;
TerminalConfig._meta_.fields["contactAndTerminalConfig"] = {};
TerminalConfig._meta_.fields["contactAndTerminalConfig"].type = String;
TerminalConfig._meta_.fields["contactAndTerminalConfigSignature"] = {};
TerminalConfig._meta_.fields["contactAndTerminalConfigSignature"].type = String;
TerminalConfig._meta_.fields["contactlessConfig"] = {};
TerminalConfig._meta_.fields["contactlessConfig"].type = String;
TerminalConfig._meta_.fields["contactlessConfigSignature"] = {};
TerminalConfig._meta_.fields["contactlessConfigSignature"].type = String;
TerminalConfig._meta_.fields["capkConfig"] = {};
TerminalConfig._meta_.fields["capkConfig"].type = String;
TerminalConfig._meta_.fields["capkConfigSignature"] = {};
TerminalConfig._meta_.fields["capkConfigSignature"].type = String;
TerminalConfig._meta_.fields["revokedCapkConfig"] = {};
TerminalConfig._meta_.fields["revokedCapkConfig"].type = String;
TerminalConfig._meta_.fields["revokedCapkConfigSignature"] = {};
TerminalConfig._meta_.fields["revokedCapkConfigSignature"].type = String;
TerminalConfig._meta_.fields["tagDatabase"] = {};
TerminalConfig._meta_.fields["tagDatabase"].type = String;
TerminalConfig._meta_.fields["protocolConfig"] = {};
TerminalConfig._meta_.fields["protocolConfig"].type = String;
TerminalConfig._meta_.fields["protocolConfigSignature"] = {};
TerminalConfig._meta_.fields["protocolConfigSignature"].type = String;
TerminalConfig._meta_.fields["terminalParameters"] = {};
TerminalConfig._meta_.fields["terminalParameters"].type = Array;
TerminalConfig._meta_.fields["terminalParameters"].elementType = payments_TerminalParam;
TerminalConfig._meta_.fields["events"] = {};
TerminalConfig._meta_.fields["events"].type = Array;
TerminalConfig._meta_.fields["events"].elementType = payments_TerminalManagementEvent;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = TerminalConfig;
}

