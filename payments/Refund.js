/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var payments_TaxableAmountRate = require("../payments/TaxableAmountRate");
var payments_ServiceChargeAmount = require("../payments/ServiceChargeAmount");
var base_Reference = require("../base/Reference");
var base_Tender = require("../base/Tender");

/**
* @constructor
* @memberof payments
*/
var Refund = function() {
  this._class_ = Refund;
  this.id = undefined;
  this.orderRef = undefined;
  this.device = undefined;
  this.amount = undefined;
  this.taxAmount = undefined;
  this.tipAmount = undefined;
  this.createdTime = undefined;
  this.clientCreatedTime = undefined;
  this.payment = undefined;
  this.employee = undefined;
  this.lineItems = undefined;
  this.overrideMerchantTender = undefined;
  this.taxableAmountRates = undefined;
  this.serviceChargeAmount = undefined;
};


/**
* Set the field value
* Unique identifier
*
* @memberof payments.Refund
* @param {String} id 
*/
Refund.prototype.setId = function(id) {
  this.id = id;
};

/**
* Get the field value
* Unique identifier
* @memberof payments.Refund
* @return {String} 
*/
Refund.prototype.getId = function() {
  return this.id;
};

/**
* Set the field value
* The order with which the refund is associated
*
* @memberof payments.Refund
* @param {base.Reference} orderRef 
*/
Refund.prototype.setOrderRef = function(orderRef) {
  this.orderRef = orderRef;
};

/**
* Get the field value
* The order with which the refund is associated
* @memberof payments.Refund
* @return {base.Reference} 
*/
Refund.prototype.getOrderRef = function() {
  return this.orderRef;
};

/**
* Set the field value
* Device which processed the transaction for this refund
*
* @memberof payments.Refund
* @param {base.Reference|Null} device 
*/
Refund.prototype.setDevice = function(device) {
  this.device = device;
};

/**
* Get the field value
* Device which processed the transaction for this refund
* @memberof payments.Refund
* @return {base.Reference|Null} 
*/
Refund.prototype.getDevice = function() {
  return this.device;
};

/**
* Set the field value
* Total amount refunded, including tax and tip
*
* @memberof payments.Refund
* @param {Number} amount must be a long integer
*/
Refund.prototype.setAmount = function(amount) {
  this.amount = amount;
};

/**
* Get the field value
* Total amount refunded, including tax and tip
* @memberof payments.Refund
* @return {Number} must be a long integer
*/
Refund.prototype.getAmount = function() {
  return this.amount;
};

/**
* Set the field value
* Tax amount refunded
*
* @memberof payments.Refund
* @param {Number|Null} taxAmount must be a long integer, 
*/
Refund.prototype.setTaxAmount = function(taxAmount) {
  this.taxAmount = taxAmount;
};

/**
* Get the field value
* Tax amount refunded
* @memberof payments.Refund
* @return {Number|Null} must be a long integer, 
*/
Refund.prototype.getTaxAmount = function() {
  return this.taxAmount;
};

/**
* Set the field value
* Tip amount refunded
*
* @memberof payments.Refund
* @param {Number|Null} tipAmount must be a long integer, 
*/
Refund.prototype.setTipAmount = function(tipAmount) {
  this.tipAmount = tipAmount;
};

/**
* Get the field value
* Tip amount refunded
* @memberof payments.Refund
* @return {Number|Null} must be a long integer, 
*/
Refund.prototype.getTipAmount = function() {
  return this.tipAmount;
};

/**
* Set the field value
* The time when the refund was recorded on the server
*
* @memberof payments.Refund
* @param {Number} createdTime must be a long integer
*/
Refund.prototype.setCreatedTime = function(createdTime) {
  this.createdTime = createdTime;
};

/**
* Get the field value
* The time when the refund was recorded on the server
* @memberof payments.Refund
* @return {Number} must be a long integer
*/
Refund.prototype.getCreatedTime = function() {
  return this.createdTime;
};

/**
* Set the field value
* The time when the refund was recorded on the client
*
* @memberof payments.Refund
* @param {Number} clientCreatedTime must be a long integer
*/
Refund.prototype.setClientCreatedTime = function(clientCreatedTime) {
  this.clientCreatedTime = clientCreatedTime;
};

/**
* Get the field value
* The time when the refund was recorded on the client
* @memberof payments.Refund
* @return {Number} must be a long integer
*/
Refund.prototype.getClientCreatedTime = function() {
  return this.clientCreatedTime;
};

/**
* Set the field value
* The payment with which the refund is associated
*
* @memberof payments.Refund
* @param {base.Reference} payment 
*/
Refund.prototype.setPayment = function(payment) {
  this.payment = payment;
};

/**
* Get the field value
* The payment with which the refund is associated
* @memberof payments.Refund
* @return {base.Reference} 
*/
Refund.prototype.getPayment = function() {
  return this.payment;
};

/**
* Set the field value
* @memberof payments.Refund
* @param {base.Reference} employee 
*/
Refund.prototype.setEmployee = function(employee) {
  this.employee = employee;
};

/**
* Get the field value
* @memberof payments.Refund
* @return {base.Reference} 
*/
Refund.prototype.getEmployee = function() {
  return this.employee;
};

/**
* Set the field value
* @memberof payments.Refund
* @param {Array.<base.Reference>} lineItems An array of 
*/
Refund.prototype.setLineItems = function(lineItems) {
  this.lineItems = lineItems;
};

/**
* Get the field value
* @memberof payments.Refund
* @return {Array.<base.Reference>} An array of 
*/
Refund.prototype.getLineItems = function() {
  return this.lineItems;
};

/**
* Set the field value
* The tender type associated with this payment, e.g. credit card, cash, etc.
*
* @memberof payments.Refund
* @param {base.Tender} overrideMerchantTender 
*/
Refund.prototype.setOverrideMerchantTender = function(overrideMerchantTender) {
  this.overrideMerchantTender = overrideMerchantTender;
};

/**
* Get the field value
* The tender type associated with this payment, e.g. credit card, cash, etc.
* @memberof payments.Refund
* @return {base.Tender} 
*/
Refund.prototype.getOverrideMerchantTender = function() {
  return this.overrideMerchantTender;
};

/**
* Set the field value
* @memberof payments.Refund
* @param {Array.<payments.TaxableAmountRate>} taxableAmountRates An array of 
*/
Refund.prototype.setTaxableAmountRates = function(taxableAmountRates) {
  this.taxableAmountRates = taxableAmountRates;
};

/**
* Get the field value
* @memberof payments.Refund
* @return {Array.<payments.TaxableAmountRate>} An array of 
*/
Refund.prototype.getTaxableAmountRates = function() {
  return this.taxableAmountRates;
};

/**
* Set the field value
* @memberof payments.Refund
* @param {payments.ServiceChargeAmount} serviceChargeAmount 
*/
Refund.prototype.setServiceChargeAmount = function(serviceChargeAmount) {
  this.serviceChargeAmount = serviceChargeAmount;
};

/**
* Get the field value
* @memberof payments.Refund
* @return {payments.ServiceChargeAmount} 
*/
Refund.prototype.getServiceChargeAmount = function() {
  return this.serviceChargeAmount;
};

/**
* @memberof payments.Refund
* @private
*/
Refund.prototype.getMetaInfo = function(fieldName) {
  var curclass = this._class_;
  do {
    var fieldMetaInfo = curclass._meta_.fields[fieldName];
    if(fieldMetaInfo) {
      return fieldMetaInfo;
    }
    curclass = curclass.superclass;
  } while(curclass);
  return null;
};

Refund.prototype.toString = function() {
  return JSON.stringify(this);
};

Refund._meta_ =  {fields:  {}};
Refund._meta_.fields["id"] = {};
Refund._meta_.fields["id"].type = String;
Refund._meta_.fields["orderRef"] = {};
Refund._meta_.fields["orderRef"].type = base_Reference;
Refund._meta_.fields["device"] = {};
Refund._meta_.fields["device"].type = base_Reference;
Refund._meta_.fields["amount"] = {};
Refund._meta_.fields["amount"].type = Number;
Refund._meta_.fields["taxAmount"] = {};
Refund._meta_.fields["taxAmount"].type = Number;
Refund._meta_.fields["tipAmount"] = {};
Refund._meta_.fields["tipAmount"].type = Number;
Refund._meta_.fields["createdTime"] = {};
Refund._meta_.fields["createdTime"].type = Number;
Refund._meta_.fields["clientCreatedTime"] = {};
Refund._meta_.fields["clientCreatedTime"].type = Number;
Refund._meta_.fields["payment"] = {};
Refund._meta_.fields["payment"].type = base_Reference;
Refund._meta_.fields["employee"] = {};
Refund._meta_.fields["employee"].type = base_Reference;
Refund._meta_.fields["lineItems"] = {};
Refund._meta_.fields["lineItems"].type = Array;
Refund._meta_.fields["lineItems"].elementType = base_Reference;
Refund._meta_.fields["overrideMerchantTender"] = {};
Refund._meta_.fields["overrideMerchantTender"].type = base_Tender;
Refund._meta_.fields["taxableAmountRates"] = {};
Refund._meta_.fields["taxableAmountRates"].type = Array;
Refund._meta_.fields["taxableAmountRates"].elementType = payments_TaxableAmountRate;
Refund._meta_.fields["serviceChargeAmount"] = {};
Refund._meta_.fields["serviceChargeAmount"].type = payments_ServiceChargeAmount;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = Refund;
}

